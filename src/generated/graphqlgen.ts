// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Post } from "./prisma-client";
import { User } from "./prisma-client";
import { HelloPayload } from "../types";
import { Context } from "../types";

type Role = "ADMIN" | "CUSTOMER";
type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "auth0id_ASC"
  | "auth0id_DESC"
  | "identity_ASC"
  | "identity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    role: Role | null;
    role_not: Role | null;
    role_in: Role[];
    role_not_in: Role[];
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    avatar: string | null;
    avatar_not: string | null;
    avatar_in: string[];
    avatar_not_in: string[];
    avatar_lt: string | null;
    avatar_lte: string | null;
    avatar_gt: string | null;
    avatar_gte: string | null;
    avatar_contains: string | null;
    avatar_not_contains: string | null;
    avatar_starts_with: string | null;
    avatar_not_starts_with: string | null;
    avatar_ends_with: string | null;
    avatar_not_ends_with: string | null;
    auth0id: string | null;
    auth0id_not: string | null;
    auth0id_in: string[];
    auth0id_not_in: string[];
    auth0id_lt: string | null;
    auth0id_lte: string | null;
    auth0id_gt: string | null;
    auth0id_gte: string | null;
    auth0id_contains: string | null;
    auth0id_not_contains: string | null;
    auth0id_starts_with: string | null;
    auth0id_not_starts_with: string | null;
    auth0id_ends_with: string | null;
    auth0id_not_ends_with: string | null;
    identity: string | null;
    identity_not: string | null;
    identity_in: string[];
    identity_not_in: string[];
    identity_lt: string | null;
    identity_lte: string | null;
    identity_gt: string | null;
    identity_gte: string | null;
    identity_contains: string | null;
    identity_not_contains: string | null;
    identity_starts_with: string | null;
    identity_not_starts_with: string | null;
    identity_ends_with: string | null;
    identity_not_ends_with: string | null;
    posts_every: PostWhereInput | null;
    posts_some: PostWhereInput | null;
    posts_none: PostWhereInput | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }
  export interface PostWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    isPublished: boolean | null;
    isPublished_not: boolean | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    text: string | null;
    text_not: string | null;
    text_in: string[];
    text_not_in: string[];
    text_lt: string | null;
    text_lte: string | null;
    text_gt: string | null;
    text_gte: string | null;
    text_contains: string | null;
    text_not_contains: string | null;
    text_starts_with: string | null;
    text_not_starts_with: string | null;
    text_ends_with: string | null;
    text_not_ends_with: string | null;
    testString: string | null;
    testString_not: string | null;
    testString_in: string[];
    testString_not_in: string[];
    testString_lt: string | null;
    testString_lte: string | null;
    testString_gt: string | null;
    testString_gte: string | null;
    testString_contains: string | null;
    testString_not_contains: string | null;
    testString_starts_with: string | null;
    testString_not_starts_with: string | null;
    testString_ends_with: string | null;
    testString_not_ends_with: string | null;
    user: UserWhereInput | null;
    AND: PostWhereInput[];
    OR: PostWhereInput[];
    NOT: PostWhereInput[];
  }

  export interface ArgsPost {
    id: string;
  }

  export interface ArgsUsers {
    where: UserWhereInput | null;
    orderBy: UserOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type FeedResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type DraftsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type PostResolver = (
    parent: {},
    args: ArgsPost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type MeResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type UsersResolver = (
    parent: {},
    args: ArgsUsers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export interface Type {
    feed: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    drafts: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    post: (
      parent: {},
      args: ArgsPost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    me: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    users: (
      parent: {},
      args: ArgsUsers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    isPublished: (parent: Post) => parent.isPublished,
    title: (parent: Post) => parent.title,
    text: (parent: Post) => parent.text,
    testString: (parent: Post) => parent.testString,
    user: (parent: Post) => parent.user
  };

  export type IdResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IsPublishedResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TitleResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TextResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TestStringResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UserResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    id: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    isPublished: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    title: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    text: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    testString: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    user: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    role: (parent: User) => parent.role,
    name: (parent: User) => parent.name,
    avatar: (parent: User) => parent.avatar,
    identity: (parent: User) => parent.identity
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RoleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role | null | Promise<Role | null>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AvatarResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IdentityResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    role: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role | null | Promise<Role | null>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    avatar: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    identity: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsAuthenticate {
    idToken: string;
  }

  export interface ArgsCreateDraft {
    title: string;
    text: string | null;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsPublish {
    id: string;
  }

  export type AuthenticateResolver = (
    parent: {},
    args: ArgsAuthenticate,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type CreateDraftResolver = (
    parent: {},
    args: ArgsCreateDraft,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type DeletePostResolver = (
    parent: {},
    args: ArgsDeletePost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type PublishResolver = (
    parent: {},
    args: ArgsPublish,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export interface Type {
    authenticate: (
      parent: {},
      args: ArgsAuthenticate,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    createDraft: (
      parent: {},
      args: ArgsCreateDraft,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    deletePost: (
      parent: {},
      args: ArgsDeletePost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    publish: (
      parent: {},
      args: ArgsPublish,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;
  }
}

export namespace HelloPayloadResolvers {
  export const defaultResolvers = {
    name: (parent: HelloPayload) =>
      parent.name === undefined ? null : parent.name
  };

  export type NameResolver = (
    parent: HelloPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    name: (
      parent: HelloPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
  HelloPayload: HelloPayloadResolvers.Type;
}
